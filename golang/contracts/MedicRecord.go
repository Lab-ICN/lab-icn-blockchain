// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package medic

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MedicRecordPatient is an auto generated low-level Go binding around an user-defined struct.
type MedicRecordPatient struct {
	Id            common.Address
	NoKtp         *big.Int
	Nama          string
	Alamat        string
	JenisKelamin  string
	GolonganDarah string
	NomorTelepon  *big.Int
	NoBpjs        *big.Int
	Records       []MedicRecordRecord
}

// MedicRecordRecord is an auto generated low-level Go binding around an user-defined struct.
type MedicRecordRecord struct {
	Cid         string
	PatientId   common.Address
	DoctorId    common.Address
	Temperature uint8
	Sistol      uint8
	Diastol     uint8
	TimeAdded   *big.Int
}

// MedicMetaData contains all meta data concerning the Medic contract.
var MedicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doctorId\",\"type\":\"address\"}],\"name\":\"DoctorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hospitaId\",\"type\":\"address\"}],\"name\":\"HospitalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"patientId\",\"type\":\"address\"}],\"name\":\"InsuranceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"patientId\",\"type\":\"address\"}],\"name\":\"PatientAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"patientId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doctorId\",\"type\":\"address\"}],\"name\":\"RecordAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nama\",\"type\":\"string\"}],\"name\":\"addDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hospitalId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_namaRs\",\"type\":\"string\"}],\"name\":\"addHospital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_namaInsurance\",\"type\":\"string\"}],\"name\":\"addInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nama\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_patientId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_doctorId\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"temperature\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"diastol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sistol\",\"type\":\"uint8\"}],\"name\":\"addRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nama\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientId\",\"type\":\"address\"}],\"name\":\"getPatientData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"noKtp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nama\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"alamat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jenisKelamin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"golonganDarah\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nomorTelepon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noBpjs\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patientId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"doctorId\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"temperature\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sistol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"diastol\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"internalType\":\"structMedicRecord.Record[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"internalType\":\"structMedicRecord.Patient\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientId\",\"type\":\"address\"}],\"name\":\"getPatientExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientId\",\"type\":\"address\"}],\"name\":\"getRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patientId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"doctorId\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"temperature\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sistol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"diastol\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timeAdded\",\"type\":\"uint256\"}],\"internalType\":\"structMedicRecord.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSenderRole\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hospitals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nama\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nama\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"patients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"noKtp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nama\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"alamat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jenisKelamin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"golonganDarah\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nomorTelepon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noBpjs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506131bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806348e818521161008c578063a0076e8411610066578063a0076e841461022a578063a9583c221461025a578063db66c0601461028b578063f093cf80146102a7576100cf565b806348e81852146101ae5780637bc769ed146101de578063819745531461020e576100cf565b80630869cfbc146100d45780630be617001461010b57806326b5440a1461012757806327bae60a146101435780633a88162e14610174578063457bcea914610192575b600080fd5b6100ee60048036038101906100e99190612317565b6102d8565b6040516101029897969594939291906123fc565b60405180910390f35b610125600480360381019061012091906125cb565b610560565b005b610141600480360381019061013c9190612614565b61073b565b005b61015d60048036038101906101589190612317565b610917565b60405161016b929190612670565b60405180910390f35b61017c6109e3565b60405161018991906126a0565b60405180910390f35b6101ac60048036038101906101a79190612614565b610bc4565b005b6101c860048036038101906101c39190612317565b610e70565b6040516101d59190612985565b60405180910390f35b6101f860048036038101906101f39190612317565b611453565b60405161020591906129c2565b60405180910390f35b61022860048036038101906102239190612a09565b6115bc565b005b610244600480360381019061023f9190612317565b61198b565b6040516102519190612b38565b60405180910390f35b610274600480360381019061026f9190612317565b611e02565b604051610282929190612670565b60405180910390f35b6102a560048036038101906102a09190612614565b611ece565b005b6102c160048036038101906102bc9190612317565b612177565b6040516102cf929190612670565b60405180910390f35b60006020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461032790612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461035390612b89565b80156103a05780601f10610375576101008083540402835291602001916103a0565b820191906000526020600020905b81548152906001019060200180831161038357829003601f168201915b5050505050908060030180546103b590612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546103e190612b89565b801561042e5780601f106104035761010080835404028352916020019161042e565b820191906000526020600020905b81548152906001019060200180831161041157829003601f168201915b50505050509080600401805461044390612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461046f90612b89565b80156104bc5780601f10610491576101008083540402835291602001916104bc565b820191906000526020600020905b81548152906001019060200180831161049f57829003601f168201915b5050505050908060050180546104d190612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd90612b89565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b5050505050908060060154908060070154905088565b3373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612c06565b60405180910390fd5b33600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190816107009190612dd2565b507f69908b2e63170aa89ef89719bbe3b4c92cccc38653968ab25f4464eff7c28ac8336040516107309190612ea4565b60405180910390a150565b8173ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290612f0b565b60405180910390fd5b81600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190816108db9190612dd2565b507f0d017ca7e087763e37d963098c041704b8f461afbeb90695705d44a74f6639cb8260405161090b9190612ea4565b60405180910390a15050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461096090612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461098c90612b89565b80156109d95780601f106109ae576101008083540402835291602001916109d9565b820191906000526020600020905b8154815290600101906020018083116109bc57829003601f168201915b5050505050905082565b60603373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ab7576040518060400160405280600681526020017f646f63746f7200000000000000000000000000000000000000000000000000008152509050610bc1565b3373ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b88576040518060400160405280600781526020017f70617469656e74000000000000000000000000000000000000000000000000008152509050610bc1565b6040518060400160405280600781526020017f756e6b6e6f776e0000000000000000000000000000000000000000000000000081525090505b90565b3373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90612f77565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5b90612fe3565b60405180910390fd5b81600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019081610e349190612dd2565b507f98b422b4248851ae9e727f5fd491b255462f5872bd0493c1ddf7308ccedfa1a282604051610e649190612ea4565b60405180910390a15050565b610e78612243565b3373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612f77565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201805461100290612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461102e90612b89565b801561107b5780601f106110505761010080835404028352916020019161107b565b820191906000526020600020905b81548152906001019060200180831161105e57829003601f168201915b5050505050815260200160038201805461109490612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546110c090612b89565b801561110d5780601f106110e25761010080835404028352916020019161110d565b820191906000526020600020905b8154815290600101906020018083116110f057829003601f168201915b5050505050815260200160048201805461112690612b89565b80601f016020809104026020016040519081016040528092919081815260200182805461115290612b89565b801561119f5780601f106111745761010080835404028352916020019161119f565b820191906000526020600020905b81548152906001019060200180831161118257829003601f168201915b505050505081526020016005820180546111b890612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546111e490612b89565b80156112315780601f1061120657610100808354040283529160200191611231565b820191906000526020600020905b81548152906001019060200180831161121457829003601f168201915b50505050508152602001600682015481526020016007820154815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561144457838290600052602060002090600402016040518060e00160405290816000820180546112a690612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546112d290612b89565b801561131f5780601f106112f45761010080835404028352916020019161131f565b820191906000526020600020905b81548152906001019060200180831161130257829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1660ff1660ff1681526020016002820160159054906101000a900460ff1660ff1660ff1681526020016002820160169054906101000a900460ff1660ff1660ff16815260200160038201548152505081526020019060010190611273565b50505050815250509050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151c90612f77565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390612f77565b60405180910390fd5b848073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461175c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117539061304f565b60405180910390fd5b60006040518060e001604052808981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1681526020018460ff1681526020018560ff1681526020014281525090506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190816118489190612dd2565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908360ff16021790555060808201518160020160156101000a81548160ff021916908360ff16021790555060a08201518160020160166101000a81548160ff021916908360ff16021790555060c0820151816003015550507f79439a93ba0b8067e556b3942a78ac58d991c58e2e23041c4e7aa1c446fc11888888886040516119799392919061306f565b60405180910390a15050505050505050565b60603373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611ab557503373ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb906130f9565b60405180910390fd5b818073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbb9061304f565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801805480602002602001604051908101604052809291908181526020016000905b82821015611df657838290600052602060002090600402016040518060e0016040529081600082018054611c5890612b89565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8490612b89565b8015611cd15780601f10611ca657610100808354040283529160200191611cd1565b820191906000526020600020905b815481529060010190602001808311611cb457829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff1660ff1660ff1681526020016002820160159054906101000a900460ff1660ff1660ff1681526020016002820160169054906101000a900460ff1660ff1660ff16815260200160038201548152505081526020019060010190611c25565b50505050915050919050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611e4b90612b89565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7790612b89565b8015611ec45780601f10611e9957610100808354040283529160200191611ec4565b820191906000526020600020905b815481529060010190602001808311611ea757829003601f168201915b5050505050905082565b3373ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9590612f77565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206490613165565b60405180910390fd5b816000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201908161213b9190612dd2565b507fa58cff07db0adda3ab7a40bd2f18ab57210bf38391a52ffd2e8eee6b8bdec71a8260405161216b9190612ea4565b60405180910390a15050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546121c090612b89565b80601f01602080910402602001604051908101604052809291908181526020018280546121ec90612b89565b80156122395780601f1061220e57610100808354040283529160200191612239565b820191906000526020600020905b81548152906001019060200180831161221c57829003601f168201915b5050505050905082565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122e4826122b9565b9050919050565b6122f4816122d9565b81146122ff57600080fd5b50565b600081359050612311816122eb565b92915050565b60006020828403121561232d5761232c6122af565b5b600061233b84828501612302565b91505092915050565b61234d816122d9565b82525050565b6000819050919050565b61236681612353565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123a657808201518184015260208101905061238b565b60008484015250505050565b6000601f19601f8301169050919050565b60006123ce8261236c565b6123d88185612377565b93506123e8818560208601612388565b6123f1816123b2565b840191505092915050565b600061010082019050612412600083018b612344565b61241f602083018a61235d565b818103604083015261243181896123c3565b9050818103606083015261244581886123c3565b9050818103608083015261245981876123c3565b905081810360a083015261246d81866123c3565b905061247c60c083018561235d565b61248960e083018461235d565b9998505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124d8826123b2565b810181811067ffffffffffffffff821117156124f7576124f66124a0565b5b80604052505050565b600061250a6122a5565b905061251682826124cf565b919050565b600067ffffffffffffffff821115612536576125356124a0565b5b61253f826123b2565b9050602081019050919050565b82818337600083830152505050565b600061256e6125698461251b565b612500565b90508281526020810184848401111561258a5761258961249b565b5b61259584828561254c565b509392505050565b600082601f8301126125b2576125b1612496565b5b81356125c284826020860161255b565b91505092915050565b6000602082840312156125e1576125e06122af565b5b600082013567ffffffffffffffff8111156125ff576125fe6122b4565b5b61260b8482850161259d565b91505092915050565b6000806040838503121561262b5761262a6122af565b5b600061263985828601612302565b925050602083013567ffffffffffffffff81111561265a576126596122b4565b5b6126668582860161259d565b9150509250929050565b60006040820190506126856000830185612344565b818103602083015261269781846123c3565b90509392505050565b600060208201905081810360008301526126ba81846123c3565b905092915050565b6126cb816122d9565b82525050565b6126da81612353565b82525050565b600082825260208201905092915050565b60006126fc8261236c565b61270681856126e0565b9350612716818560208601612388565b61271f816123b2565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b61276c81612756565b82525050565b600060e083016000830151848203600086015261278f82826126f1565b91505060208301516127a460208601826126c2565b5060408301516127b760408601826126c2565b5060608301516127ca6060860182612763565b5060808301516127dd6080860182612763565b5060a08301516127f060a0860182612763565b5060c083015161280360c08601826126d1565b508091505092915050565b600061281a8383612772565b905092915050565b6000602082019050919050565b600061283a8261272a565b6128448185612735565b93508360208202850161285685612746565b8060005b858110156128925784840389528151612873858261280e565b945061287e83612822565b925060208a0199505060018101905061285a565b50829750879550505050505092915050565b6000610120830160008301516128bd60008601826126c2565b5060208301516128d060208601826126d1565b50604083015184820360408601526128e882826126f1565b9150506060830151848203606086015261290282826126f1565b9150506080830151848203608086015261291c82826126f1565b91505060a083015184820360a086015261293682826126f1565b91505060c083015161294b60c08601826126d1565b5060e083015161295e60e08601826126d1565b50610100830151848203610100860152612978828261282f565b9150508091505092915050565b6000602082019050818103600083015261299f81846128a4565b905092915050565b60008115159050919050565b6129bc816129a7565b82525050565b60006020820190506129d760008301846129b3565b92915050565b6129e681612756565b81146129f157600080fd5b50565b600081359050612a03816129dd565b92915050565b60008060008060008060c08789031215612a2657612a256122af565b5b600087013567ffffffffffffffff811115612a4457612a436122b4565b5b612a5089828a0161259d565b9650506020612a6189828a01612302565b9550506040612a7289828a01612302565b9450506060612a8389828a016129f4565b9350506080612a9489828a016129f4565b92505060a0612aa589828a016129f4565b9150509295509295509295565b600082825260208201905092915050565b6000612ace8261272a565b612ad88185612ab2565b935083602082028501612aea85612746565b8060005b85811015612b265784840389528151612b07858261280e565b9450612b1283612822565b925060208a01995050600181019050612aee565b50829750879550505050505092915050565b60006020820190508181036000830152612b528184612ac3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ba157607f821691505b602082108103612bb457612bb3612b5a565b5b50919050565b7f5468697320646f63746f7220616c7265616479206578697374732e0000000000600082015250565b6000612bf0601b83612377565b9150612bfb82612bba565b602082019050919050565b60006020820190508181036000830152612c1f81612be3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c4b565b612c928683612c4b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ccf612cca612cc584612353565b612caa565b612353565b9050919050565b6000819050919050565b612ce983612cb4565b612cfd612cf582612cd6565b848454612c58565b825550505050565b600090565b612d12612d05565b612d1d818484612ce0565b505050565b5b81811015612d4157612d36600082612d0a565b600181019050612d23565b5050565b601f821115612d8657612d5781612c26565b612d6084612c3b565b81016020851015612d6f578190505b612d83612d7b85612c3b565b830182612d22565b50505b505050565b600082821c905092915050565b6000612da960001984600802612d8b565b1980831691505092915050565b6000612dc28383612d98565b9150826002028217905092915050565b612ddb8261236c565b67ffffffffffffffff811115612df457612df36124a0565b5b612dfe8254612b89565b612e09828285612d45565b600060209050601f831160018114612e3c5760008415612e2a578287015190505b612e348582612db6565b865550612e9c565b601f198416612e4a86612c26565b60005b82811015612e7257848901518255600182019150602085019450602081019050612e4d565b86831015612e8f5784890151612e8b601f891682612d98565b8355505b6001600288020188555050505b505050505050565b6000602082019050612eb96000830184612344565b92915050565b7f5468697320696e737572616e636520616c7265616479206578697374732e0000600082015250565b6000612ef5601e83612377565b9150612f0082612ebf565b602082019050919050565b60006020820190508181036000830152612f2481612ee8565b9050919050565b7f53656e646572206973206e6f74206120646f63746f7200000000000000000000600082015250565b6000612f61601683612377565b9150612f6c82612f2b565b602082019050919050565b60006020820190508181036000830152612f9081612f54565b9050919050565b7f5468697320686f73706974616c20616c7265616479206578697374732e000000600082015250565b6000612fcd601d83612377565b9150612fd882612f97565b602082019050919050565b60006020820190508181036000830152612ffc81612fc0565b9050919050565b7f50617469656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b6000613039601683612377565b915061304482613003565b602082019050919050565b600060208201905081810360008301526130688161302c565b9050919050565b6000606082019050818103600083015261308981866123c3565b90506130986020830185612344565b6130a56040830184612344565b949350505050565b7f53656e64657220646f6573206e6f742065786973740000000000000000000000600082015250565b60006130e3601583612377565b91506130ee826130ad565b602082019050919050565b60006020820190508181036000830152613112816130d6565b9050919050565b7f546869732070617469656e7420616c7265616479206578697374732e00000000600082015250565b600061314f601c83612377565b915061315a82613119565b602082019050919050565b6000602082019050818103600083015261317e81613142565b905091905056fea26469706673582212204cee222e9f44c09341deafed2fb25d9bc5005d1cc958d68fab2bbccfe96f593864736f6c63430008120033",
}

// MedicABI is the input ABI used to generate the binding from.
// Deprecated: Use MedicMetaData.ABI instead.
var MedicABI = MedicMetaData.ABI

// MedicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MedicMetaData.Bin instead.
var MedicBin = MedicMetaData.Bin

// DeployMedic deploys a new Ethereum contract, binding an instance of Medic to it.
func DeployMedic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Medic, error) {
	parsed, err := MedicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MedicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Medic{MedicCaller: MedicCaller{contract: contract}, MedicTransactor: MedicTransactor{contract: contract}, MedicFilterer: MedicFilterer{contract: contract}}, nil
}

// Medic is an auto generated Go binding around an Ethereum contract.
type Medic struct {
	MedicCaller     // Read-only binding to the contract
	MedicTransactor // Write-only binding to the contract
	MedicFilterer   // Log filterer for contract events
}

// MedicCaller is an auto generated read-only Go binding around an Ethereum contract.
type MedicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MedicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MedicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MedicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MedicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MedicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MedicSession struct {
	Contract     *Medic            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MedicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MedicCallerSession struct {
	Contract *MedicCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MedicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MedicTransactorSession struct {
	Contract     *MedicTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MedicRaw is an auto generated low-level Go binding around an Ethereum contract.
type MedicRaw struct {
	Contract *Medic // Generic contract binding to access the raw methods on
}

// MedicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MedicCallerRaw struct {
	Contract *MedicCaller // Generic read-only contract binding to access the raw methods on
}

// MedicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MedicTransactorRaw struct {
	Contract *MedicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMedic creates a new instance of Medic, bound to a specific deployed contract.
func NewMedic(address common.Address, backend bind.ContractBackend) (*Medic, error) {
	contract, err := bindMedic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Medic{MedicCaller: MedicCaller{contract: contract}, MedicTransactor: MedicTransactor{contract: contract}, MedicFilterer: MedicFilterer{contract: contract}}, nil
}

// NewMedicCaller creates a new read-only instance of Medic, bound to a specific deployed contract.
func NewMedicCaller(address common.Address, caller bind.ContractCaller) (*MedicCaller, error) {
	contract, err := bindMedic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MedicCaller{contract: contract}, nil
}

// NewMedicTransactor creates a new write-only instance of Medic, bound to a specific deployed contract.
func NewMedicTransactor(address common.Address, transactor bind.ContractTransactor) (*MedicTransactor, error) {
	contract, err := bindMedic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MedicTransactor{contract: contract}, nil
}

// NewMedicFilterer creates a new log filterer instance of Medic, bound to a specific deployed contract.
func NewMedicFilterer(address common.Address, filterer bind.ContractFilterer) (*MedicFilterer, error) {
	contract, err := bindMedic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MedicFilterer{contract: contract}, nil
}

// bindMedic binds a generic wrapper to an already deployed contract.
func bindMedic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MedicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Medic *MedicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Medic.Contract.MedicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Medic *MedicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Medic.Contract.MedicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Medic *MedicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Medic.Contract.MedicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Medic *MedicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Medic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Medic *MedicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Medic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Medic *MedicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Medic.Contract.contract.Transact(opts, method, params...)
}

// Doctors is a free data retrieval call binding the contract method 0xa9583c22.
//
// Solidity: function doctors(address ) view returns(address id, string nama)
func (_Medic *MedicCaller) Doctors(opts *bind.CallOpts, arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "doctors", arg0)

	outstruct := new(struct {
		Id   common.Address
		Nama string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Nama = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// Doctors is a free data retrieval call binding the contract method 0xa9583c22.
//
// Solidity: function doctors(address ) view returns(address id, string nama)
func (_Medic *MedicSession) Doctors(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Doctors(&_Medic.CallOpts, arg0)
}

// Doctors is a free data retrieval call binding the contract method 0xa9583c22.
//
// Solidity: function doctors(address ) view returns(address id, string nama)
func (_Medic *MedicCallerSession) Doctors(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Doctors(&_Medic.CallOpts, arg0)
}

// GetPatientData is a free data retrieval call binding the contract method 0x48e81852.
//
// Solidity: function getPatientData(address _patientId) view returns((address,uint256,string,string,string,string,uint256,uint256,(string,address,address,uint8,uint8,uint8,uint256)[]))
func (_Medic *MedicCaller) GetPatientData(opts *bind.CallOpts, _patientId common.Address) (MedicRecordPatient, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "getPatientData", _patientId)

	if err != nil {
		return *new(MedicRecordPatient), err
	}

	out0 := *abi.ConvertType(out[0], new(MedicRecordPatient)).(*MedicRecordPatient)

	return out0, err

}

// GetPatientData is a free data retrieval call binding the contract method 0x48e81852.
//
// Solidity: function getPatientData(address _patientId) view returns((address,uint256,string,string,string,string,uint256,uint256,(string,address,address,uint8,uint8,uint8,uint256)[]))
func (_Medic *MedicSession) GetPatientData(_patientId common.Address) (MedicRecordPatient, error) {
	return _Medic.Contract.GetPatientData(&_Medic.CallOpts, _patientId)
}

// GetPatientData is a free data retrieval call binding the contract method 0x48e81852.
//
// Solidity: function getPatientData(address _patientId) view returns((address,uint256,string,string,string,string,uint256,uint256,(string,address,address,uint8,uint8,uint8,uint256)[]))
func (_Medic *MedicCallerSession) GetPatientData(_patientId common.Address) (MedicRecordPatient, error) {
	return _Medic.Contract.GetPatientData(&_Medic.CallOpts, _patientId)
}

// GetPatientExists is a free data retrieval call binding the contract method 0x7bc769ed.
//
// Solidity: function getPatientExists(address _patientId) view returns(bool)
func (_Medic *MedicCaller) GetPatientExists(opts *bind.CallOpts, _patientId common.Address) (bool, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "getPatientExists", _patientId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetPatientExists is a free data retrieval call binding the contract method 0x7bc769ed.
//
// Solidity: function getPatientExists(address _patientId) view returns(bool)
func (_Medic *MedicSession) GetPatientExists(_patientId common.Address) (bool, error) {
	return _Medic.Contract.GetPatientExists(&_Medic.CallOpts, _patientId)
}

// GetPatientExists is a free data retrieval call binding the contract method 0x7bc769ed.
//
// Solidity: function getPatientExists(address _patientId) view returns(bool)
func (_Medic *MedicCallerSession) GetPatientExists(_patientId common.Address) (bool, error) {
	return _Medic.Contract.GetPatientExists(&_Medic.CallOpts, _patientId)
}

// GetRecords is a free data retrieval call binding the contract method 0xa0076e84.
//
// Solidity: function getRecords(address _patientId) view returns((string,address,address,uint8,uint8,uint8,uint256)[])
func (_Medic *MedicCaller) GetRecords(opts *bind.CallOpts, _patientId common.Address) ([]MedicRecordRecord, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "getRecords", _patientId)

	if err != nil {
		return *new([]MedicRecordRecord), err
	}

	out0 := *abi.ConvertType(out[0], new([]MedicRecordRecord)).(*[]MedicRecordRecord)

	return out0, err

}

// GetRecords is a free data retrieval call binding the contract method 0xa0076e84.
//
// Solidity: function getRecords(address _patientId) view returns((string,address,address,uint8,uint8,uint8,uint256)[])
func (_Medic *MedicSession) GetRecords(_patientId common.Address) ([]MedicRecordRecord, error) {
	return _Medic.Contract.GetRecords(&_Medic.CallOpts, _patientId)
}

// GetRecords is a free data retrieval call binding the contract method 0xa0076e84.
//
// Solidity: function getRecords(address _patientId) view returns((string,address,address,uint8,uint8,uint8,uint256)[])
func (_Medic *MedicCallerSession) GetRecords(_patientId common.Address) ([]MedicRecordRecord, error) {
	return _Medic.Contract.GetRecords(&_Medic.CallOpts, _patientId)
}

// GetSenderRole is a free data retrieval call binding the contract method 0x3a88162e.
//
// Solidity: function getSenderRole() view returns(string)
func (_Medic *MedicCaller) GetSenderRole(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "getSenderRole")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSenderRole is a free data retrieval call binding the contract method 0x3a88162e.
//
// Solidity: function getSenderRole() view returns(string)
func (_Medic *MedicSession) GetSenderRole() (string, error) {
	return _Medic.Contract.GetSenderRole(&_Medic.CallOpts)
}

// GetSenderRole is a free data retrieval call binding the contract method 0x3a88162e.
//
// Solidity: function getSenderRole() view returns(string)
func (_Medic *MedicCallerSession) GetSenderRole() (string, error) {
	return _Medic.Contract.GetSenderRole(&_Medic.CallOpts)
}

// Hospitals is a free data retrieval call binding the contract method 0xf093cf80.
//
// Solidity: function hospitals(address ) view returns(address id, string nama)
func (_Medic *MedicCaller) Hospitals(opts *bind.CallOpts, arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "hospitals", arg0)

	outstruct := new(struct {
		Id   common.Address
		Nama string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Nama = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// Hospitals is a free data retrieval call binding the contract method 0xf093cf80.
//
// Solidity: function hospitals(address ) view returns(address id, string nama)
func (_Medic *MedicSession) Hospitals(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Hospitals(&_Medic.CallOpts, arg0)
}

// Hospitals is a free data retrieval call binding the contract method 0xf093cf80.
//
// Solidity: function hospitals(address ) view returns(address id, string nama)
func (_Medic *MedicCallerSession) Hospitals(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Hospitals(&_Medic.CallOpts, arg0)
}

// Insurances is a free data retrieval call binding the contract method 0x27bae60a.
//
// Solidity: function insurances(address ) view returns(address id, string nama)
func (_Medic *MedicCaller) Insurances(opts *bind.CallOpts, arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "insurances", arg0)

	outstruct := new(struct {
		Id   common.Address
		Nama string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Nama = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// Insurances is a free data retrieval call binding the contract method 0x27bae60a.
//
// Solidity: function insurances(address ) view returns(address id, string nama)
func (_Medic *MedicSession) Insurances(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Insurances(&_Medic.CallOpts, arg0)
}

// Insurances is a free data retrieval call binding the contract method 0x27bae60a.
//
// Solidity: function insurances(address ) view returns(address id, string nama)
func (_Medic *MedicCallerSession) Insurances(arg0 common.Address) (struct {
	Id   common.Address
	Nama string
}, error) {
	return _Medic.Contract.Insurances(&_Medic.CallOpts, arg0)
}

// Patients is a free data retrieval call binding the contract method 0x0869cfbc.
//
// Solidity: function patients(address ) view returns(address id, uint256 noKtp, string nama, string alamat, string jenisKelamin, string golonganDarah, uint256 nomorTelepon, uint256 noBpjs)
func (_Medic *MedicCaller) Patients(opts *bind.CallOpts, arg0 common.Address) (struct {
	Id            common.Address
	NoKtp         *big.Int
	Nama          string
	Alamat        string
	JenisKelamin  string
	GolonganDarah string
	NomorTelepon  *big.Int
	NoBpjs        *big.Int
}, error) {
	var out []interface{}
	err := _Medic.contract.Call(opts, &out, "patients", arg0)

	outstruct := new(struct {
		Id            common.Address
		NoKtp         *big.Int
		Nama          string
		Alamat        string
		JenisKelamin  string
		GolonganDarah string
		NomorTelepon  *big.Int
		NoBpjs        *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NoKtp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Nama = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Alamat = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.JenisKelamin = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.GolonganDarah = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.NomorTelepon = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.NoBpjs = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Patients is a free data retrieval call binding the contract method 0x0869cfbc.
//
// Solidity: function patients(address ) view returns(address id, uint256 noKtp, string nama, string alamat, string jenisKelamin, string golonganDarah, uint256 nomorTelepon, uint256 noBpjs)
func (_Medic *MedicSession) Patients(arg0 common.Address) (struct {
	Id            common.Address
	NoKtp         *big.Int
	Nama          string
	Alamat        string
	JenisKelamin  string
	GolonganDarah string
	NomorTelepon  *big.Int
	NoBpjs        *big.Int
}, error) {
	return _Medic.Contract.Patients(&_Medic.CallOpts, arg0)
}

// Patients is a free data retrieval call binding the contract method 0x0869cfbc.
//
// Solidity: function patients(address ) view returns(address id, uint256 noKtp, string nama, string alamat, string jenisKelamin, string golonganDarah, uint256 nomorTelepon, uint256 noBpjs)
func (_Medic *MedicCallerSession) Patients(arg0 common.Address) (struct {
	Id            common.Address
	NoKtp         *big.Int
	Nama          string
	Alamat        string
	JenisKelamin  string
	GolonganDarah string
	NomorTelepon  *big.Int
	NoBpjs        *big.Int
}, error) {
	return _Medic.Contract.Patients(&_Medic.CallOpts, arg0)
}

// AddDoctor is a paid mutator transaction binding the contract method 0x0be61700.
//
// Solidity: function addDoctor(string _nama) returns()
func (_Medic *MedicTransactor) AddDoctor(opts *bind.TransactOpts, _nama string) (*types.Transaction, error) {
	return _Medic.contract.Transact(opts, "addDoctor", _nama)
}

// AddDoctor is a paid mutator transaction binding the contract method 0x0be61700.
//
// Solidity: function addDoctor(string _nama) returns()
func (_Medic *MedicSession) AddDoctor(_nama string) (*types.Transaction, error) {
	return _Medic.Contract.AddDoctor(&_Medic.TransactOpts, _nama)
}

// AddDoctor is a paid mutator transaction binding the contract method 0x0be61700.
//
// Solidity: function addDoctor(string _nama) returns()
func (_Medic *MedicTransactorSession) AddDoctor(_nama string) (*types.Transaction, error) {
	return _Medic.Contract.AddDoctor(&_Medic.TransactOpts, _nama)
}

// AddHospital is a paid mutator transaction binding the contract method 0x457bcea9.
//
// Solidity: function addHospital(address _hospitalId, string _namaRs) returns()
func (_Medic *MedicTransactor) AddHospital(opts *bind.TransactOpts, _hospitalId common.Address, _namaRs string) (*types.Transaction, error) {
	return _Medic.contract.Transact(opts, "addHospital", _hospitalId, _namaRs)
}

// AddHospital is a paid mutator transaction binding the contract method 0x457bcea9.
//
// Solidity: function addHospital(address _hospitalId, string _namaRs) returns()
func (_Medic *MedicSession) AddHospital(_hospitalId common.Address, _namaRs string) (*types.Transaction, error) {
	return _Medic.Contract.AddHospital(&_Medic.TransactOpts, _hospitalId, _namaRs)
}

// AddHospital is a paid mutator transaction binding the contract method 0x457bcea9.
//
// Solidity: function addHospital(address _hospitalId, string _namaRs) returns()
func (_Medic *MedicTransactorSession) AddHospital(_hospitalId common.Address, _namaRs string) (*types.Transaction, error) {
	return _Medic.Contract.AddHospital(&_Medic.TransactOpts, _hospitalId, _namaRs)
}

// AddInsurance is a paid mutator transaction binding the contract method 0x26b5440a.
//
// Solidity: function addInsurance(address _insuranceId, string _namaInsurance) returns()
func (_Medic *MedicTransactor) AddInsurance(opts *bind.TransactOpts, _insuranceId common.Address, _namaInsurance string) (*types.Transaction, error) {
	return _Medic.contract.Transact(opts, "addInsurance", _insuranceId, _namaInsurance)
}

// AddInsurance is a paid mutator transaction binding the contract method 0x26b5440a.
//
// Solidity: function addInsurance(address _insuranceId, string _namaInsurance) returns()
func (_Medic *MedicSession) AddInsurance(_insuranceId common.Address, _namaInsurance string) (*types.Transaction, error) {
	return _Medic.Contract.AddInsurance(&_Medic.TransactOpts, _insuranceId, _namaInsurance)
}

// AddInsurance is a paid mutator transaction binding the contract method 0x26b5440a.
//
// Solidity: function addInsurance(address _insuranceId, string _namaInsurance) returns()
func (_Medic *MedicTransactorSession) AddInsurance(_insuranceId common.Address, _namaInsurance string) (*types.Transaction, error) {
	return _Medic.Contract.AddInsurance(&_Medic.TransactOpts, _insuranceId, _namaInsurance)
}

// AddPatient is a paid mutator transaction binding the contract method 0xdb66c060.
//
// Solidity: function addPatient(address _patientId, string _nama) returns()
func (_Medic *MedicTransactor) AddPatient(opts *bind.TransactOpts, _patientId common.Address, _nama string) (*types.Transaction, error) {
	return _Medic.contract.Transact(opts, "addPatient", _patientId, _nama)
}

// AddPatient is a paid mutator transaction binding the contract method 0xdb66c060.
//
// Solidity: function addPatient(address _patientId, string _nama) returns()
func (_Medic *MedicSession) AddPatient(_patientId common.Address, _nama string) (*types.Transaction, error) {
	return _Medic.Contract.AddPatient(&_Medic.TransactOpts, _patientId, _nama)
}

// AddPatient is a paid mutator transaction binding the contract method 0xdb66c060.
//
// Solidity: function addPatient(address _patientId, string _nama) returns()
func (_Medic *MedicTransactorSession) AddPatient(_patientId common.Address, _nama string) (*types.Transaction, error) {
	return _Medic.Contract.AddPatient(&_Medic.TransactOpts, _patientId, _nama)
}

// AddRecord is a paid mutator transaction binding the contract method 0x81974553.
//
// Solidity: function addRecord(string _cid, address _patientId, address _doctorId, uint8 temperature, uint8 diastol, uint8 sistol) returns()
func (_Medic *MedicTransactor) AddRecord(opts *bind.TransactOpts, _cid string, _patientId common.Address, _doctorId common.Address, temperature uint8, diastol uint8, sistol uint8) (*types.Transaction, error) {
	return _Medic.contract.Transact(opts, "addRecord", _cid, _patientId, _doctorId, temperature, diastol, sistol)
}

// AddRecord is a paid mutator transaction binding the contract method 0x81974553.
//
// Solidity: function addRecord(string _cid, address _patientId, address _doctorId, uint8 temperature, uint8 diastol, uint8 sistol) returns()
func (_Medic *MedicSession) AddRecord(_cid string, _patientId common.Address, _doctorId common.Address, temperature uint8, diastol uint8, sistol uint8) (*types.Transaction, error) {
	return _Medic.Contract.AddRecord(&_Medic.TransactOpts, _cid, _patientId, _doctorId, temperature, diastol, sistol)
}

// AddRecord is a paid mutator transaction binding the contract method 0x81974553.
//
// Solidity: function addRecord(string _cid, address _patientId, address _doctorId, uint8 temperature, uint8 diastol, uint8 sistol) returns()
func (_Medic *MedicTransactorSession) AddRecord(_cid string, _patientId common.Address, _doctorId common.Address, temperature uint8, diastol uint8, sistol uint8) (*types.Transaction, error) {
	return _Medic.Contract.AddRecord(&_Medic.TransactOpts, _cid, _patientId, _doctorId, temperature, diastol, sistol)
}

// MedicDoctorAddedIterator is returned from FilterDoctorAdded and is used to iterate over the raw logs and unpacked data for DoctorAdded events raised by the Medic contract.
type MedicDoctorAddedIterator struct {
	Event *MedicDoctorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MedicDoctorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MedicDoctorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MedicDoctorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MedicDoctorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MedicDoctorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MedicDoctorAdded represents a DoctorAdded event raised by the Medic contract.
type MedicDoctorAdded struct {
	DoctorId common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDoctorAdded is a free log retrieval operation binding the contract event 0x69908b2e63170aa89ef89719bbe3b4c92cccc38653968ab25f4464eff7c28ac8.
//
// Solidity: event DoctorAdded(address doctorId)
func (_Medic *MedicFilterer) FilterDoctorAdded(opts *bind.FilterOpts) (*MedicDoctorAddedIterator, error) {

	logs, sub, err := _Medic.contract.FilterLogs(opts, "DoctorAdded")
	if err != nil {
		return nil, err
	}
	return &MedicDoctorAddedIterator{contract: _Medic.contract, event: "DoctorAdded", logs: logs, sub: sub}, nil
}

// WatchDoctorAdded is a free log subscription operation binding the contract event 0x69908b2e63170aa89ef89719bbe3b4c92cccc38653968ab25f4464eff7c28ac8.
//
// Solidity: event DoctorAdded(address doctorId)
func (_Medic *MedicFilterer) WatchDoctorAdded(opts *bind.WatchOpts, sink chan<- *MedicDoctorAdded) (event.Subscription, error) {

	logs, sub, err := _Medic.contract.WatchLogs(opts, "DoctorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MedicDoctorAdded)
				if err := _Medic.contract.UnpackLog(event, "DoctorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDoctorAdded is a log parse operation binding the contract event 0x69908b2e63170aa89ef89719bbe3b4c92cccc38653968ab25f4464eff7c28ac8.
//
// Solidity: event DoctorAdded(address doctorId)
func (_Medic *MedicFilterer) ParseDoctorAdded(log types.Log) (*MedicDoctorAdded, error) {
	event := new(MedicDoctorAdded)
	if err := _Medic.contract.UnpackLog(event, "DoctorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MedicHospitalAddedIterator is returned from FilterHospitalAdded and is used to iterate over the raw logs and unpacked data for HospitalAdded events raised by the Medic contract.
type MedicHospitalAddedIterator struct {
	Event *MedicHospitalAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MedicHospitalAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MedicHospitalAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MedicHospitalAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MedicHospitalAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MedicHospitalAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MedicHospitalAdded represents a HospitalAdded event raised by the Medic contract.
type MedicHospitalAdded struct {
	HospitaId common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterHospitalAdded is a free log retrieval operation binding the contract event 0x98b422b4248851ae9e727f5fd491b255462f5872bd0493c1ddf7308ccedfa1a2.
//
// Solidity: event HospitalAdded(address hospitaId)
func (_Medic *MedicFilterer) FilterHospitalAdded(opts *bind.FilterOpts) (*MedicHospitalAddedIterator, error) {

	logs, sub, err := _Medic.contract.FilterLogs(opts, "HospitalAdded")
	if err != nil {
		return nil, err
	}
	return &MedicHospitalAddedIterator{contract: _Medic.contract, event: "HospitalAdded", logs: logs, sub: sub}, nil
}

// WatchHospitalAdded is a free log subscription operation binding the contract event 0x98b422b4248851ae9e727f5fd491b255462f5872bd0493c1ddf7308ccedfa1a2.
//
// Solidity: event HospitalAdded(address hospitaId)
func (_Medic *MedicFilterer) WatchHospitalAdded(opts *bind.WatchOpts, sink chan<- *MedicHospitalAdded) (event.Subscription, error) {

	logs, sub, err := _Medic.contract.WatchLogs(opts, "HospitalAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MedicHospitalAdded)
				if err := _Medic.contract.UnpackLog(event, "HospitalAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHospitalAdded is a log parse operation binding the contract event 0x98b422b4248851ae9e727f5fd491b255462f5872bd0493c1ddf7308ccedfa1a2.
//
// Solidity: event HospitalAdded(address hospitaId)
func (_Medic *MedicFilterer) ParseHospitalAdded(log types.Log) (*MedicHospitalAdded, error) {
	event := new(MedicHospitalAdded)
	if err := _Medic.contract.UnpackLog(event, "HospitalAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MedicInsuranceAddedIterator is returned from FilterInsuranceAdded and is used to iterate over the raw logs and unpacked data for InsuranceAdded events raised by the Medic contract.
type MedicInsuranceAddedIterator struct {
	Event *MedicInsuranceAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MedicInsuranceAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MedicInsuranceAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MedicInsuranceAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MedicInsuranceAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MedicInsuranceAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MedicInsuranceAdded represents a InsuranceAdded event raised by the Medic contract.
type MedicInsuranceAdded struct {
	PatientId common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterInsuranceAdded is a free log retrieval operation binding the contract event 0x0d017ca7e087763e37d963098c041704b8f461afbeb90695705d44a74f6639cb.
//
// Solidity: event InsuranceAdded(address patientId)
func (_Medic *MedicFilterer) FilterInsuranceAdded(opts *bind.FilterOpts) (*MedicInsuranceAddedIterator, error) {

	logs, sub, err := _Medic.contract.FilterLogs(opts, "InsuranceAdded")
	if err != nil {
		return nil, err
	}
	return &MedicInsuranceAddedIterator{contract: _Medic.contract, event: "InsuranceAdded", logs: logs, sub: sub}, nil
}

// WatchInsuranceAdded is a free log subscription operation binding the contract event 0x0d017ca7e087763e37d963098c041704b8f461afbeb90695705d44a74f6639cb.
//
// Solidity: event InsuranceAdded(address patientId)
func (_Medic *MedicFilterer) WatchInsuranceAdded(opts *bind.WatchOpts, sink chan<- *MedicInsuranceAdded) (event.Subscription, error) {

	logs, sub, err := _Medic.contract.WatchLogs(opts, "InsuranceAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MedicInsuranceAdded)
				if err := _Medic.contract.UnpackLog(event, "InsuranceAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsuranceAdded is a log parse operation binding the contract event 0x0d017ca7e087763e37d963098c041704b8f461afbeb90695705d44a74f6639cb.
//
// Solidity: event InsuranceAdded(address patientId)
func (_Medic *MedicFilterer) ParseInsuranceAdded(log types.Log) (*MedicInsuranceAdded, error) {
	event := new(MedicInsuranceAdded)
	if err := _Medic.contract.UnpackLog(event, "InsuranceAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MedicPatientAddedIterator is returned from FilterPatientAdded and is used to iterate over the raw logs and unpacked data for PatientAdded events raised by the Medic contract.
type MedicPatientAddedIterator struct {
	Event *MedicPatientAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MedicPatientAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MedicPatientAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MedicPatientAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MedicPatientAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MedicPatientAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MedicPatientAdded represents a PatientAdded event raised by the Medic contract.
type MedicPatientAdded struct {
	PatientId common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPatientAdded is a free log retrieval operation binding the contract event 0xa58cff07db0adda3ab7a40bd2f18ab57210bf38391a52ffd2e8eee6b8bdec71a.
//
// Solidity: event PatientAdded(address patientId)
func (_Medic *MedicFilterer) FilterPatientAdded(opts *bind.FilterOpts) (*MedicPatientAddedIterator, error) {

	logs, sub, err := _Medic.contract.FilterLogs(opts, "PatientAdded")
	if err != nil {
		return nil, err
	}
	return &MedicPatientAddedIterator{contract: _Medic.contract, event: "PatientAdded", logs: logs, sub: sub}, nil
}

// WatchPatientAdded is a free log subscription operation binding the contract event 0xa58cff07db0adda3ab7a40bd2f18ab57210bf38391a52ffd2e8eee6b8bdec71a.
//
// Solidity: event PatientAdded(address patientId)
func (_Medic *MedicFilterer) WatchPatientAdded(opts *bind.WatchOpts, sink chan<- *MedicPatientAdded) (event.Subscription, error) {

	logs, sub, err := _Medic.contract.WatchLogs(opts, "PatientAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MedicPatientAdded)
				if err := _Medic.contract.UnpackLog(event, "PatientAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePatientAdded is a log parse operation binding the contract event 0xa58cff07db0adda3ab7a40bd2f18ab57210bf38391a52ffd2e8eee6b8bdec71a.
//
// Solidity: event PatientAdded(address patientId)
func (_Medic *MedicFilterer) ParsePatientAdded(log types.Log) (*MedicPatientAdded, error) {
	event := new(MedicPatientAdded)
	if err := _Medic.contract.UnpackLog(event, "PatientAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MedicRecordAddedIterator is returned from FilterRecordAdded and is used to iterate over the raw logs and unpacked data for RecordAdded events raised by the Medic contract.
type MedicRecordAddedIterator struct {
	Event *MedicRecordAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MedicRecordAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MedicRecordAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MedicRecordAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MedicRecordAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MedicRecordAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MedicRecordAdded represents a RecordAdded event raised by the Medic contract.
type MedicRecordAdded struct {
	Cid       string
	PatientId common.Address
	DoctorId  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRecordAdded is a free log retrieval operation binding the contract event 0x79439a93ba0b8067e556b3942a78ac58d991c58e2e23041c4e7aa1c446fc1188.
//
// Solidity: event RecordAdded(string cid, address patientId, address doctorId)
func (_Medic *MedicFilterer) FilterRecordAdded(opts *bind.FilterOpts) (*MedicRecordAddedIterator, error) {

	logs, sub, err := _Medic.contract.FilterLogs(opts, "RecordAdded")
	if err != nil {
		return nil, err
	}
	return &MedicRecordAddedIterator{contract: _Medic.contract, event: "RecordAdded", logs: logs, sub: sub}, nil
}

// WatchRecordAdded is a free log subscription operation binding the contract event 0x79439a93ba0b8067e556b3942a78ac58d991c58e2e23041c4e7aa1c446fc1188.
//
// Solidity: event RecordAdded(string cid, address patientId, address doctorId)
func (_Medic *MedicFilterer) WatchRecordAdded(opts *bind.WatchOpts, sink chan<- *MedicRecordAdded) (event.Subscription, error) {

	logs, sub, err := _Medic.contract.WatchLogs(opts, "RecordAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MedicRecordAdded)
				if err := _Medic.contract.UnpackLog(event, "RecordAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordAdded is a log parse operation binding the contract event 0x79439a93ba0b8067e556b3942a78ac58d991c58e2e23041c4e7aa1c446fc1188.
//
// Solidity: event RecordAdded(string cid, address patientId, address doctorId)
func (_Medic *MedicFilterer) ParseRecordAdded(log types.Log) (*MedicRecordAdded, error) {
	event := new(MedicRecordAdded)
	if err := _Medic.contract.UnpackLog(event, "RecordAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
